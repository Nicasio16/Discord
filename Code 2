import discord
import aiohttp
import asyncio
from discord import Webhook, AsyncWebhookAdapter
from discord.ext import commands
import requests
from bs4 import BeautifulSoup

class Academia:
    def __init__(self):
        self.headers = {'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.3'}
        self.url = 'https://scholar.google.com/scholar?hl=en&as_sdt=0%252C5&q='
        
    def keywords_search_words(self, message):
        words = message.split()[1:]
        keywords = '+'.join(words)
        search_words = ' '.join(words)
        return keywords, search_words

  
    def search(self, keywords):
    # create requests and get the response
        response = requests.get(self.url+keywords, headers = self.headers)
        content = response.content
    # pase the html and pull the data we want 
        soup = BeautifulSoup(content, 'html.parser')
        result_links = soup.findAll('a')
        return result_links

    def send_link(self, result_links, search_words): 
        send_link = set()
        for link in result_links:
            text = link.text.lower()
            if search_words in text: 
                if link.get('href').startswith('/scholar?'):
                    continue
                send_link.add(link.get('href'))
        return send_link


client = discord.Client()
client = commands.Bot(command_prefix='$')

#@client.command()
#async def embed(message):
    

@client.event
async def on_ready():
    print('We have logged in as {0.user}'.format(client))

@client.event
async def on_message(message):
    if message.author == client.user:
        return

    message_content = message.content.lower()  

    no_result_message = 'Sorry, we can\'t find what you are searching for.'

    sukz = Academia()   

    
    if message.content.startswith('$hello'):
        await message.channel.send('Hello!')

    if message.content.startswith('$thumb'):
        channel = message.channel
        await channel.send('Send me that 👍 reaction, mate')

        def check(reaction, user):
            return user == message.author and str(reaction.emoji) == '👍'

        try:
            reaction, user = await client.wait_for('reaction_add', timeout=60.0, check=check)
        except asyncio.TimeoutError:
            await channel.send('👎')
        else:
            await channel.send('👍')

    if message.content.startswith('$bb'):
        await message.channel.send('wat')
    
    if f'$search' in message.content:

        key_words, search_words = sukz.keywords_search_words(message.content)
        result_links= sukz.search(key_words)
        links = sukz.send_link(result_links, search_words)
    
        if len(links) > 0:
            for link in links:
                await message.channel.send(link)
        else:
            await message.channel.send(no_result_message)
    
    if message.content.startswith('$embed'):
        embedVar= discord.Embed(title='Test')
        await message.channel.send(embed=embedVar)

    if message.content.startswith('$close'):
        await client.close()
        print("Bot Closed")

    
@client.command()
async def shutdown(ctx):
    if ctx.content.startswith('$shutdown'):
        await ctx.client.close()  

#@client.command()
#async def embed(ctx):
#    embed=discord.Embed(title="Sample Embed", url="https://realdrewdata.medium.com/", description="This is an embed that will show how to build an embed and the different components", color=0xFF5733)
#    await ctx.send(embed=embed)
    
#@client.event
#async def sayafter(message):
 #   if message.author == client.user:
  #      return
   # if message.content.startswith('$bb'):
    #    await message.channel.send('wat')
    
  
#bot
#@bot.command()
#@commands.is_owner()
#async def shutdown(ctx):
#    await ctx.bot.logout()

client.run('MTAwMjI5NjI0MjU1MTkxNDUyNw.G5QiDU.d2SC0tNBtDdC0sHTcP3DEj3kJYtCOEl0LwjDmA')


#10469034000
